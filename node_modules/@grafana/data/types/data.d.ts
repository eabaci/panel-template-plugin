import { Threshold } from './threshold';
import { ValueMapping } from './valueMapping';
export declare enum LoadingState {
    NotStarted = "NotStarted",
    Loading = "Loading",
    Streaming = "Streaming",
    Done = "Done",
    Error = "Error"
}
export declare enum FieldType {
    time = "time",
    number = "number",
    string = "string",
    boolean = "boolean",
    other = "other"
}
export interface QueryResultMeta {
    [key: string]: any;
    requestId?: string;
    searchWords?: string[];
    limit?: number;
}
export interface QueryResultBase {
    /**
     * Matches the query target refId
     */
    refId?: string;
    /**
     * Used by some backend datasources to communicate back info about the execution (generated sql, timing)
     */
    meta?: QueryResultMeta;
}
export interface Field {
    name: string;
    title?: string;
    type?: FieldType;
    filterable?: boolean;
    unit?: string;
    dateFormat?: string;
    decimals?: number | null;
    min?: number | null;
    max?: number | null;
    mappings?: ValueMapping[];
    thresholds?: Threshold[];
}
export interface Labels {
    [key: string]: string;
}
export interface DataFrame extends QueryResultBase {
    name?: string;
    fields: Field[];
    rows: any[][];
    labels?: Labels;
}
export interface Column {
    text: string;
    filterable?: boolean;
    unit?: string;
}
export interface TableData extends QueryResultBase {
    name?: string;
    columns: Column[];
    rows: any[][];
}
export declare type TimeSeriesValue = number | null;
export declare type TimeSeriesPoints = TimeSeriesValue[][];
export interface TimeSeries extends QueryResultBase {
    target: string;
    datapoints: TimeSeriesPoints;
    unit?: string;
    tags?: Labels;
}
export declare enum NullValueMode {
    Null = "null",
    Ignore = "connected",
    AsZero = "null as zero"
}
export interface AnnotationEvent {
    id?: string;
    annotation?: any;
    dashboardId?: number;
    panelId?: number;
    userId?: number;
    login?: string;
    email?: string;
    avatarUrl?: string;
    time?: number;
    timeEnd?: number;
    isRegion?: boolean;
    title?: string;
    text?: string;
    type?: string;
    tags?: string[];
}
