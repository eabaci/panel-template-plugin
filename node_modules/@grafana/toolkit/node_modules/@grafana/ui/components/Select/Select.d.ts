import React, { PureComponent } from 'react';
import { PopoverContent } from '../Tooltip/Tooltip';
import { SelectableValue } from '@grafana/data';
export interface CommonProps<T> {
    defaultValue?: any;
    getOptionLabel?: (item: SelectableValue<T>) => string;
    getOptionValue?: (item: SelectableValue<T>) => string;
    onChange: (item: SelectableValue<T>) => {} | void;
    placeholder?: string;
    width?: number;
    value?: SelectableValue<T>;
    className?: string;
    isDisabled?: boolean;
    isSearchable?: boolean;
    isClearable?: boolean;
    autoFocus?: boolean;
    openMenuOnFocus?: boolean;
    onBlur?: () => void;
    maxMenuHeight?: number;
    isLoading?: boolean;
    noOptionsMessage?: () => string;
    isMulti?: boolean;
    backspaceRemovesValue?: boolean;
    isOpen?: boolean;
    components?: any;
    tooltipContent?: PopoverContent;
    onOpenMenu?: () => void;
    onCloseMenu?: () => void;
    tabSelectsValue?: boolean;
}
export interface SelectProps<T> extends CommonProps<T> {
    options: Array<SelectableValue<T>>;
}
interface AsyncProps<T> extends CommonProps<T> {
    defaultOptions: boolean;
    loadOptions: (query: string) => Promise<Array<SelectableValue<T>>>;
    loadingMessage?: () => string;
}
export declare const MenuList: (props: any) => JSX.Element;
export declare class Select<T> extends PureComponent<SelectProps<T>> {
    static defaultProps: Partial<SelectProps<any>>;
    render(): JSX.Element;
}
export declare class AsyncSelect<T> extends PureComponent<AsyncProps<T>> {
    static defaultProps: Partial<AsyncProps<any>>;
    render(): JSX.Element;
}
export interface TooltipWrapperProps {
    children: (onOpenMenu: () => void, onCloseMenu: () => void) => React.ReactNode;
    onOpenMenu?: () => void;
    onCloseMenu?: () => void;
    isOpen?: boolean;
    tooltipContent?: PopoverContent;
}
export interface TooltipWrapperState {
    isOpenInternal: boolean;
}
export declare class WrapInTooltip extends PureComponent<TooltipWrapperProps, TooltipWrapperState> {
    state: TooltipWrapperState;
    onOpenMenu: () => void;
    onCloseMenu: () => void;
    render(): JSX.Element;
}
export default Select;
