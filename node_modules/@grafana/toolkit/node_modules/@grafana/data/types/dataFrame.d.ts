import { Threshold } from './threshold';
import { ValueMapping } from './valueMapping';
import { QueryResultBase, Labels, NullValueMode } from './data';
import { FieldCalcs } from '../utils/index';
import { DisplayProcessor } from './displayValue';
export declare enum FieldType {
    time = "time",
    number = "number",
    string = "string",
    boolean = "boolean",
    other = "other"
}
/**
 * Every property is optional
 *
 * Plugins may extend this with additional properties.  Somethign like series overrides
 */
export interface FieldConfig {
    title?: string;
    filterable?: boolean;
    unit?: string;
    decimals?: number | null;
    min?: number | null;
    max?: number | null;
    mappings?: ValueMapping[];
    thresholds?: Threshold[];
    nullValueMode?: NullValueMode;
    noValue?: string;
}
export interface Vector<T = any> {
    length: number;
    /**
     * Access the value by index (Like an array)
     */
    get(index: number): T;
    /**
     * Get the resutls as an array.
     */
    toArray(): T[];
    /**
     * Return the values as a simple array for json serialization
     */
    toJSON(): any;
}
export interface Field<T = any> {
    name: string;
    type: FieldType;
    config: FieldConfig;
    values: Vector<T>;
    /**
     * Cache of reduced values
     */
    calcs?: FieldCalcs;
    /**
     * Convert text to the field value
     */
    parse?: (value: any) => T;
    /**
     * Convert a value for display
     */
    display?: DisplayProcessor;
}
export interface DataFrame extends QueryResultBase {
    name?: string;
    fields: Field[];
    labels?: Labels;
    length: number;
}
/**
 * Like a field, but properties are optional and values may be a simple array
 */
export interface FieldDTO<T = any> {
    name: string;
    type?: FieldType;
    config?: FieldConfig;
    values?: Vector<T> | T[];
}
/**
 * Like a DataFrame, but fields may be a FieldDTO
 */
export interface DataFrameDTO extends QueryResultBase {
    name?: string;
    labels?: Labels;
    fields: Array<FieldDTO | Field>;
}
