import { Vector } from '../types/dataFrame';
export declare function vectorToArray<T>(v: Vector<T>): T[];
export declare class ArrayVector<T = any> implements Vector<T> {
    buffer: T[];
    constructor(buffer?: T[]);
    readonly length: number;
    get(index: number): T;
    toArray(): T[];
    toJSON(): T[];
}
export declare class ConstantVector<T = any> implements Vector<T> {
    private value;
    private len;
    constructor(value: T, len: number);
    readonly length: number;
    get(index: number): T;
    toArray(): T[];
    toJSON(): T[];
}
export declare class ScaledVector implements Vector<number> {
    private source;
    private scale;
    constructor(source: Vector<number>, scale: number);
    readonly length: number;
    get(index: number): number;
    toArray(): number[];
    toJSON(): number[];
}
export declare class CircularVector<T = any> implements Vector<T> {
    buffer: T[];
    index: number;
    length: number;
    constructor(buffer: T[]);
    append(value: T): void;
    get(index: number): T;
    toArray(): T[];
    toJSON(): T[];
}
/**
 * Values are returned in the order defined by the input parameter
 */
export declare class SortedVector<T = any> implements Vector<T> {
    private source;
    private order;
    constructor(source: Vector<T>, order: number[]);
    readonly length: number;
    get(index: number): T;
    toArray(): T[];
    toJSON(): T[];
}
