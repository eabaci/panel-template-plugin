"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var task_1 = require("./task");
var githubClient_1 = tslib_1.__importDefault(require("../utils/githubClient"));
var cherryPickRunner = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var githubClient, client, res, commands, _a, _b, item, issueDetails, e_1_1;
    var e_1, _c;
    return tslib_1.__generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                githubClient = new githubClient_1.default();
                client = githubClient.client;
                return [4 /*yield*/, client.get('/issues', {
                        params: {
                            state: 'closed',
                            labels: 'cherry-pick needed',
                        },
                    })];
            case 1:
                res = _d.sent();
                // sort by closed date ASC
                res.data.sort(function (a, b) {
                    return new Date(a.closed_at).getTime() - new Date(b.closed_at).getTime();
                });
                commands = '';
                console.log('--------------------------------------------------------------------');
                console.log('Printing PRs with cherry-pick-needed, in ASC merge date order');
                console.log('--------------------------------------------------------------------');
                _d.label = 2;
            case 2:
                _d.trys.push([2, 7, 8, 9]);
                _a = tslib_1.__values(res.data), _b = _a.next();
                _d.label = 3;
            case 3:
                if (!!_b.done) return [3 /*break*/, 6];
                item = _b.value;
                if (!item.milestone) {
                    console.log(item.number + ' missing milestone!');
                    return [3 /*break*/, 5];
                }
                return [4 /*yield*/, client.get(item.pull_request.url)];
            case 4:
                issueDetails = _d.sent();
                console.log("* " + item.title + ", (#" + item.number + "), merge-sha: " + issueDetails.data.merge_commit_sha);
                commands += "git cherry-pick -x " + issueDetails.data.merge_commit_sha + "\n";
                _d.label = 5;
            case 5:
                _b = _a.next();
                return [3 /*break*/, 3];
            case 6: return [3 /*break*/, 9];
            case 7:
                e_1_1 = _d.sent();
                e_1 = { error: e_1_1 };
                return [3 /*break*/, 9];
            case 8:
                try {
                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                }
                finally { if (e_1) throw e_1.error; }
                return [7 /*endfinally*/];
            case 9:
                console.log('--------------------------------------------------------------------');
                console.log('Commands (in order of how they should be executed)');
                console.log('--------------------------------------------------------------------');
                console.log(commands);
                return [2 /*return*/];
        }
    });
}); };
exports.cherryPickTask = new task_1.Task('Cherry pick task', cherryPickRunner);
//# sourceMappingURL=cherrypick.js.map